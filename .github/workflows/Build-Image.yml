name: Build and Push Docker Image to ACR

on:
  workflow_dispatch:

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm ci

      # Step 4: Run SonarCloud Scan
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          args: >
            -Dsonar.organization=it21237690
            -Dsonar.projectKey=IT21237690_CTSE_Project
            -Dsonar.coverage.exclusions=**
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Step 5: Check SonarCloud analysis result (with response logging)
      - name: Check SonarCloud analysis result
        run: |
          echo "Checking if SonarCloud passed"
          RESPONSE=$(curl -s -u ${{ secrets.SONAR_TOKEN }} "https://sonarcloud.io/api/project_branches/list?project=IT21237690_CTSE_Project")
      
          QUALITY_GATE_STATUS=$(echo "$RESPONSE" | jq -r '.branches[0].status.qualityGateStatus')
      
          # Check if the 'qualityGateStatus' is 'OK'
          if [ "$QUALITY_GATE_STATUS" != "OK" ]; then
            echo "SonarCloud check failed with quality gate status: $QUALITY_GATE_STATUS, stopping build."
            exit 1
          fi


      # Step 6: Set up Docker BuildKit
      - name: Set up Docker BuildKit
        run: echo "DOCKER_BUILDKIT=1" >> $GITHUB_ENV 

      # Step 7: Set up Docker Buildx
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3

      # Step 8: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ACR_REGISTRY_URL }}/auth-service:latest .

      # Step 9: Log in to Azure Container Registry
      - name: Log in to Azure Container Registry
        run: |
          echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ secrets.ACR_REGISTRY_URL }} --username ${{ secrets.ACR_USERNAME }} --password-stdin

      # Step 10: Push Docker image to ACR
      - name: Push Docker image to ACR
        run: |
          docker push ${{ secrets.ACR_REGISTRY_URL }}/auth-service:latest
